from matplotlib import pyplot as plt
import pandas as pd
import torch
import numpy as np
from chronos import BaseChronosPipeline
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from chronos import ChronosPipeline

# pipeline = BaseChronosPipeline.from_pretrained(
#     "amazon/chronos-t5-small",
#     device_map="cpu",
#     torch_dtype=torch.bfloat16,
# )

pipeline = ChronosPipeline.from_pretrained(
  "amazon/chronos-t5-large",
  device_map="cpu",
  torch_dtype=torch.bfloat16,
)

df = pd.read_csv("/Users/cosmin/Desktop/analiza articole/electricitate 2024/consum/Consum 2023-2024 National.csv")
train_data = df.iloc[:-24]   
test_data = df.iloc[-24:]   

context_tensor = torch.tensor(train_data["RO Load"].values, dtype=torch.float32)
quantiles, mean = pipeline.predict_quantiles(
    context=context_tensor,
    prediction_length=24,     # 24 hours
    quantile_levels=[0.1, 0.5, 0.9],
)

predictions = mean[0].numpy()  
actual = test_data["RO Load"].values


def calculate_metrics(y_true, y_pred):
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    mae = mean_absolute_error(y_true, y_pred)
    
    
    mape = np.mean(np.abs((y_true - y_pred) / y_true)) * 100
    nrmse = rmse / (y_true.max() - y_true.min())
    mbe = np.mean(y_pred - y_true)
    cv = rmse / np.mean(y_true)
    smape = np.mean(2.0 * np.abs(y_pred - y_true) / (np.abs(y_true) + np.abs(y_pred))) * 100
    r2 = r2_score(y_true, y_pred)
    loss = mse / (y_true.max() - y_true.min())**2
    
    return {
        'MSE': mse,
        'RMSE': rmse,
        'MAE': mae,
        'MAPE': mape,
        'NRMSE': nrmse,
        'MBE': mbe,
        'CV': cv,
        'sMAPE': smape,
        'R2': r2,
        'Loss': loss
    }

metrics = calculate_metrics(actual, predictions)
for metric, value in metrics.items():
    print(f"**{metric}: {value:.4f}**")


plt.figure(figsize=(15, 7))
# ultimele 48 hours of historical data + 24 hours prediction
plt.plot(df.index[-72:-24], train_data["RO Load"].iloc[-48:], 
         label='Historical (Last 48h)', color='royalblue')
plt.plot(df.index[-24:], test_data["RO Load"], 
         label='Actual', color='green')
plt.plot(df.index[-24:], predictions, 
         label='Predicted', color='tomato')
plt.fill_between(df.index[-24:], 
                 quantiles[0, :, 0], 
                 quantiles[0, :, 2], 
                 color='tomato', alpha=0.3, 
                 label='80% prediction interval')
plt.legend()
plt.grid(True)
plt.title('24-Hour Load Forecast with Metrics')
plt.show()
